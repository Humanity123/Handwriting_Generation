import sys
sys.path.insert(0,  '../utils')

from config import *
import tensorflow as tf
from tensorflow.python import debug as tf_debug
import numpy as np
import data
import pprint

from __init__ import *
from model_uncond import *

pp = pprint.PrettyPrinter()

def train_and_save_model():
	''' function to train and save the model '''

	mean, std = data.get_data_stats(FLAGS.uncond_strokes_train_data)

	# Generating datasets for training and validation
	train_input_data, valid_input_data, train_target_data, valid_target_data\
		= data.generate_dataset_uncond(FLAGS.uncond_strokes_train_data, FLAGS.uncond_seq_len)
	print "Data Loaded!"

	pp.pprint(flags.FLAGS.__flags)

	# Normalising data 
	# x = (x - mean) / std
	train_input_data, valid_input_data, train_target_data, valid_target_data = \
		([(stroke - mean) / std for stroke in data]
		 for data in (train_input_data, valid_input_data, train_target_data, valid_target_data))

	with tf.Session() as sess:
		model = PredNet(FLAGS, sess,  training=True)
		model.build_model()

		# Restoring model from saved model if present to resume training
		saver = tf.train.Saver(tf.trainable_variables())
		ckpt = tf.train.get_checkpoint_state(FLAGS.uncond_saved_model_directory)
		if ckpt:
			saver.restore(sess, ckpt.model_checkpoint_path)
			print ckpt.model_checkpoint_path, "Pre-trained model loaded"

		model.train(train_input_data, train_target_data, saver)
		print "Model Trained"


def sample(length=400):
	''' function to sample from the model 

			Args:
				length (int): The length of the stroke sequence to be generated. Defaults to 400
			Returns:
				Stroke data generated by the model
	'''

	mean, std = data.get_data_stats(FLAGS.uncond_strokes_train_data)
	tf.reset_default_graph()

	with tf.Session() as sess:
		model = PredNet(FLAGS, sess,  training=False)
		model.build_model()

		# Restoring model from saved models
		saver = tf.train.Saver(tf.trainable_variables())
		ckpt = tf.train.get_checkpoint_state(FLAGS.uncond_saved_model_directory)
		if ckpt:
			saver.restore(sess, ckpt.model_checkpoint_path)
			print ckpt.model_checkpoint_path, "Pre-trained model loaded"
		else:
			raise Exception("No Saved Models Found")

		strokes = (model.synthesize(length) * std) + mean
	
	print "Strokes Generated"
	return strokes

if __name__ == '__main__':
	#train_and_save_model()
	plot_stroke(sample())
